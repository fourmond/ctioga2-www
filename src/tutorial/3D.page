---
title: 3D plots
inMenu: true
orderInfo: 10
---
h2. How to plot 3D data...

One of the greatests improvements of @ctioga2@ over @ctioga@ is the
possibility now to handle gracefully 3D data, in the form of XY color
maps. As an example, we'll use the following 
"data file":plots/3D-data.dat
containing @r@ and its sinus cardinal as a function of @x@ and @y@,
together with  @x^2 - y^2@ generated using the following Ruby code:

<pre class='examples'>
{includeFile: {filename: plots/3D-gen-data.rb, processOutput: false}}
</pre>

h3. Heat map display

The most basic thing is to plot this data as a heat map. For
@ctioga2@ to understand you want a XY heat map, you need the 
@--xyz-map@ command:

{ctCmdline: plots/3D-1.ct2-sh }

Note how the <code>@1:2:4</code> is used to say that the @X@ column is
the first, the @Y@ the second and the @Z@ the fourth (ie the sinus
cardinal).

To plot the last column @x^2 - y^2@, we may have used:

{ctCmdfile: plots/3D-1bis.ct2 }

Here, we also show that it is possible to add normal XY plots after a
color map. Please be warned though that, for the moment, @ctioga2@
does not support transparency for color maps, so it is mostly useless
to try to display several color maps.

h3. Adding a legend

That said, even if it is rather easy to recognise the cardinal sinus
in the plot above, getting precise values is yet another thing. To do
that, you need to setup a so-called Z axis using @--new-zaxis@ and
instruct @ctioga2@ to use that axis to display color map:

{ctCmdline: plots/3D-2.ct2-sh }

In addition, using the @--color-map@ command or the corresponding
option, it is possible to be more precise about which colors to use:

{ctCmdline: plots/3D-3.ct2-sh }

The @#f22--#fff(0)--#22f@ snippet is used to define precisely the
color gradients. It goes from red (@#f22@) to white (@#fff) at @z = 0@
to blue (@#22f@). Any number of points can be specified thus, allowing
for rather complex effects.

h3. More about colors

The color of the heat maps is governed by something called a 
{type: color-map}, that defines a mapping between Z values and
colors. It is a list of color names separated by @-@@-@, optionally
followed by a Z value at which the given color should be 
applied exactly. If the latter is missing, colors are evenly spaced
inbetween colors of known Z values:

{ctCmdfile: plots/3D-3+cm1.ct2 }

Alternatively, it is possible to use a "color set":../doc/colors.html
as colormap, which works exactly as if you had specified the whole
list of colors separated by @-@@-@. It combines very neatly with the
color sets coming from "colorbrewer":http://colorbrewer2.org:

{ctCmdfile: plots/3D-3+cm2.ct2 }

In that case, however, the results are somewhat not satisfying, since
the very strong purple color for the first minimum of the function may
seem to imply that the minimum is as pronounced as the maximum at
@0,0@, which is not the case. To avoid that, it may be better to make
the color map symmetric around a certain Z value, here @0@ would be
the best:

{ctCmdfile: plots/3D-3+cm3.ct2 }

See how now the minimum seems much less marked, and how the intensity
of the color is more representative of the amplitude of the function ?

By default, the colors for the Z values inbetween the specified colors
are interpolated linearly in the RGB color space. You can also choose
to interpolate on the color wheel, by prefixing with @hls:@ (hue light
saturation). See how that changes the look of the above red white blue
wheel:

{ctCmdfile: plots/3D-3+cm4.ct2 }

This works also when using color sets.

h3. Contour plots

Finally, it is possible to draw contour plots using the
@--draw-contour@ command, that takes as argument the desired Z level:

{ctCmdline: plots/3D-4.ct2-sh }

h3. Only contours

By setting {cmd: fill-transparency} to 1, it is possible to fully
disable the display of the maps, which can be useful if you're only
interested in the countour plots, see:

{ctCmdline: plots/3D-5.ct2-sh }

However, as of version 0.1, a lower value for {cmd: fill-transparency}
will have no effect, ie partial transparency is not supported yet.

Starting from @ctioga2@ version 0.5, there is a much better way to
display contour plots, which we present "below":#contour-real.

*Important note:* the plots based on {cmd: xyz-map} work only on
uniform XY grids (at least as far as version 0.1 is
concerned). However, the next bits will present other ways to display
non-uniform data.


h3. XY Parametric plots

What I call parametric XY plots are plain XY plots where some details
of the presentation (for now, only colors) depend on Z values.

*Warning:* XY parametric plots are still experimental, and their
syntax is still not fully defined. Things presented here will probably
not change much, but they may...

For the sake of the example, we will use the following 
"data file":plots/parametric-data.dat generated using:

<pre class='examples'>
0.upto(40) do |i| # X values
  1.upto(4) do |j| # Z values
    x = i * 0.2
    y = 1/(1 + j/x)
    puts "#{i}\t#{y}\t#{j}"
  end
end
</pre>

They represent various saturation curves with different saturation
parameters. Its easy to display all the curves in one go:

{ctCmdline: plots/3D-6.ct2-sh }

h3. Control more aspects of the plots with parametric data

Starting from @ctioga2@ version 0.7, it is possible to use more than
one Z value and to select which aspect of the graphs they control (for
now, symbol color and size), using the @/z1@ and @/z2@ options to
{command: xy-parametric}:

{ctCmdfile: plots/3D-6-a.ct2}

Here, we take advantage of the parametric plots using the 
{command: math} backend. We use two different Z values to control both
the size of the symbols and their color: we plot a parabola @t@:@t**2@
whose symbol size @/z1@ is dictated by a sine function @0.1+sin(t)**2@
and its color a cosine function @cos(t)@.

See how the {command: math} backend switches to parametric plots as
soon as you have more than one @:@-separated column.

h3(#contour-real). Only contours, second take

Starting from @ctioga2@ version 0.5, it is possible to plot automatic
contour plots using the {cmd: contour} plot style:

{ctCmdfile: plots/3D-7.ct2}

In this mode, @ctioga2@ computes automatically the level lines and
draw them using the given color map and line style. By default,
@ctioga2@ draw major and minor level lines (similar to minor and major
ticks on axes). The @/contour-minor-style@ option controls the line
style of the minor ticks (while that of the major ticks is controlled
by the usual @/line-style@ option). The @/bar_size@ controls the width
of the Z axis bar (see that the bar is smaller than in the previous
examples).

