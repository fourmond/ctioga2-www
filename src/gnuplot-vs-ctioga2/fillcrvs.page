---
title: Filled curves
inMenu: true
---

h2. Filled curves

The original gallery can be found
"there":http://gnuplot.sourceforge.net/demo_4.6/fillcrvs.html.

{fight: plots/fillcrvs.1}

Here, we set the {command: color-set} to @gnuplot@ to have @ctioga2@
colors match those of gnuplot, in order to facilitate the comparison
between the left and right plots.

Note as well that, as the @(x>3.5 ? x/3-3 : 1/0)@ plot contains
spaces, we had to quote it as @ctioga2@ splits a line into
arguments/options at spaces, a bit like the shell.

{fight: plots/fillcrvs.2}

Of course, this does not look good, even with @ctioga2@. It would have
been better to take advantage of fill transparency to avoid redrawing
the first parabola:

{ctCmdfile: plots/fillcrvs.2-better.ct2}

{fight: plots/fillcrvs.3}

We used the option @/depth=95@ to draw the curves *behind* the
background lines (they are drawn between depth 90 and 91).

{fight: plots/fillcrvs.4}

{fight: plots/fillcrvs.5}

Here, it is much smarted to fill the background of the plot rather
than to use a constant value. In addition, this @ctioga2@ plot
demonstrates the @xcolor@-like possibilities to tweak colors:
@Blue!40@ means 40% of @Blue@ mixed with 60% of something else (white
by default).

{fight: plots/fillcrvs.6}

Note that one has to change the @xy=0,1.8@ fill specification to
@xy=0,1.6@ since gnuplot will silently force any point you specify
this way to lie within the plot boundaries, which doesn't make much
sense in my eyes (because it makes it very difficult to draw lines
that go in a precise direction).

There is no way for now to specify an aspect ratio using @ctioga2@.

{fight: plots/fillcrvs.7}

Here, we use two esoteric features of <code>ctioga2</code>'s text
backend. First, if you turn on the @/split@ option of the 
{command:text} backend (which is also possible using directly the command
{command: text-split}), @ctioga2@ will divide the data files into
"subsets" separated by blank lines. You select the third subset by
adding @#3@ after the name of the file.

The second esoteric feature is the set expansion. While processing the
{command: plot} command above, @ctioga2@ will replace the @1##153@ bit
by all the numbers from 1 to 153 in succession. The effect is the same
as if we had run the {command: plot} command on 
@world.dat#1@ then on @world.dat#2@, etc, but it is of course much
more compact.

We also took advantage of the @/also-axes@ option to {command: axis-style}
to use only major ticks for all the axes in one go.

There happen to be exactly 153 bits in the file, but we could have
used @1##2000@, as @ctioga2@ just complains when datasets are missing,
but doesn't stop to build the plot.

We use {command: no-xlabel} and {command: no-ylabel} to disable the
display of the @X@ and @Y@ labels. This is different than setting an
empty label using @{command xlabel} ' '@, as the plot does not reserve
space for plotting the label, and hence the whole target space is used
for the plot.
