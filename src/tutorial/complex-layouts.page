---
title: Complex layouts
inMenu: true
orderInfo: 6
---
h2. Complex layouts

This page shows you how it is easy to change the layout of plots,
starting from the size to insets and complex grid layouts.

h3. Plot size

By default, @ctioga2@ produces a square plot of exactly @12cm@ by
@12cm@. This can be changed using the {cmd: page-size} command (or @-r@
for short):

{ctCmdline: plots/complex-layouts-1.ct2-sh}

The plots generated in this documentation have a @-r 9cmx6cm@
transparently prepended to the commands in order to get a
rectangular output.

h3. Insets

@ctioga2@ supports insets, just like the old @ctioga@ did. Only, the
inset specifications are slightly different than before. See:

{ctCmdline: plots/complex-layouts-2.ct2-sh}

The @tl:0.2,0.8:0.4,0.3@ bit signifies: place the inset's top left
(@tl@) at the position @X = 0.2, Y = 0.8@ (frame positions: @0@ is left or
bottom, @1@ is top or right), and make it @0.4@ in width and @0.3@ in
height. See how the {cmd: end} command switches back to the main plot,
and how the {cmd: title} command applies to the inset.

h3. Grids

@ctioga@ featured a way to arrange plots as "grids". It was neither
easy to use nor very satisfying. @ctioga2@ provides a completely
different way to handle the things, through the command
{cmd: setup-grid}. See: 

{ctCmdline: plots/complex-layouts-3.ct2-sh}

Once {cmd: setup-grid} has been used, start the first plot with @--inset@
and the next ones with {cmd: next-inset}. {cmd: setup-grid} takes many
options to control which space should be left on the sides of the
whole plot (@left@, @top@, @bottom@ and @right@) and how much space
should be inserted between the individual "insets" (@dx@, @dy@).

A grid element can span several rows and/or columns. Just indicate
them using a range such as @0-1@ instead of the column/row position:

{ctCmdline: plots/complex-layouts-3+1.ct2-sh}

h4. A full example of a complex grid

Let's say we want to plot @sin(omega(t) t)@ for @omega(t)@ that first
increases linearly and then decreases symetrically back to the initial
value. We want to plot the value of @omega(t)@ above the main plot,
but smaller. This is how it looks:

{ctCmdfile: plots/complex-layouts-full-grid.ct2}

To ensure both grids have the same @x@ range, despite the fact that we
use different {command: margin} inside, we define a @xr@ variable that
holds the range and use if with {command: xrange}. To have the top and
bottom plots of different size, we used @1x1,2@ as an argument to
{command: setup-grid}, which means that there is one column and two rows,
the second being twice as large as the first (we could also have used
@1x10,20@, the measures a relative). We used {command: bottom} @ticks@ to
deactivate the display of tick labels on the bottom axis in the top
plot. Finally, we used an inline bit of
"ruby":../doc/formats.html#ruby code to ease the definition of
@omega(t)@.

h4. More control on grids

The version 0.14 of @ctioga2@ introduced several features to ease the
drawing of grids. First, it is possible to fill a whole grid by
specifying @grid:next@. Second, all the subplots of the a grid
automatically receive the following classes:
 * @grid-left@, @grid-right@, @grid-top@ and @grid-bottom@ for
   subplots that are the left, right, top and bottom positions of the
   grid;
 * @grid-non-left@, @grid-non-right@, @grid-non-top@ and
   @grid-non-bottom@ for the complement;
 * @grid-column-@<i>n</i> for the <i>n</i>th column (0-based)
 * @grid-row-@_n_ for the <i>n</i>th row (0-based)
 * @grid-odd-row@, @grid-even-row@, @grid-odd-column@ and
   @grid-even-column@
 * @grid-@<i>i</i>@-@<i>j</i> for element corresponding to @grid:@<i>i</i>,<i>j</i>

This can be used for easy styling:

{ctCmdfile: plots/complex-layouts-styled-grid.ct2}


h3. Unclipped elements and control of depth

By default, elements drawn within a plot are clipped at the plot
boundaries (ie nothing goes out of the plot). However, it is sometimes
desirable to have things sticking out of the plot, for instance to
draw lines spanning from one plot to another. For that, one can use
the @/clipped=false@ options to drawing commands (or plot commands):

{ctCmdfile: plots/complex-layouts-4.ct2}

See how the first line, while having the same @x@ extension as the
second one, is clipped at plot boundaries. The @/depth=5@ is here to
make sure that the line is drawn in front of the axes (that are drawn
between depth 10 and depth 11). If you want something behind the
background lines, use a depth over 90. Keep in mind, though, that by
construction, TeX text always comes on top whatever depth you use.

