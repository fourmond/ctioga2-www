---
title: Videos
inMenu: true
orderInfo: 10
---
h2. Videos

Being a command-line tool, @ctioga2@ lends itself well to the
generation of movies, provided you have the right tools to encode
them. Here, we use
"@convert@":http://www.imagemagick.org/script/convert.php, from the 
"ImageMagick":http://www.imagemagick.org/ suite to convert the
generated PDF to the appropriate YUV format, and 
"@ffmpeg@":http://ffmpeg.org/ to encode the actual video.

We'll generate the graphs and encode them on the fly in a shell
script.

h3. Diffusion

We'll use the diffusion equation as an exemple. Imagine that the shell
variable @$i@ contains an increasing integer, figuring the time. We
can generate the ith image using the following code:

<pre class='examples-cmdline'>
ctioga2 -r 6cmx6cm --math /xrange -5:5 \
  --yrange 0:1.1 \
  "1/(0.1*${i}+1)**0.5 * exp(-x**2/(0.1*${i}+1))"
  --name Diffusion
</pre>

One converts the PDF file into a raw YUV stream using @convert@:

<pre class='examples-cmdline'>
convert -density 150 Diffusion.pdf -alpha Remove \
  -resize 400x400 -depth 8 YUV:- 
</pre>

This YUV stream is then fed to the following @ffmpeg@ pipe:

<pre class='examples-cmdline'>
ffmpeg -f rawvideo -r 25 -s 400x400 -i - Diffusion.avi
</pre>

h3. Script

One wraps all with a few ameliorations into this script:

<pre class='examples-cmdline'>
{includeFile: {filename: plots/movie.sh, processOutput: false}}
</pre>

This generates the following "video":plots/Diffusion.avi. It generates
numbered PDF files, but you could do without and reuse the same PDF
over and over again, although that may make it difficult to debug if
something goes wrong.

