---
title: 3D plots
inMenu: true
orderInfo: 5
---
h2. How to plot 3D data...

One of the greatests improvements of @ctioga2@ over @ctioga@ is the
possibility now to handle gracefully 3D data, in the form of XY color
maps. As an example, we'll use the following 
"data file":plots/3D-data.dat
containing @r@ and its sinus cardinal as a function of @x@ and @y@,
together with  @x^2 - y^2@ generated using the following Ruby code:

<pre class='examples'>
-15.upto(15) do |i|
  -15.upto(15) do |j|
    r = (i**2 + j**2)**0.5
    x2_y2 = i**2 - j**2
    puts "#{i}\t#{j}\t#{r}\t#{(r > 0 ? Math::sin(r)/r : 1)}\t#{x2_y2}"
  end
end
</pre>

h3. Simple display

The most basic thing is to plot this data as a color map. For
@ctioga2@ to understand you want a XY color map, you need the 
@--xyz-map@ command:

{ctCmdline: plots/3D-1.ct2-sh }

Note how the <code>@1:2:4</code> is used to say that the @X@ column is
the first, the @Y@ the second and the @Z@ the fourth (ie the sinus
cardinal).

To plot the last column @x^2 - y^2@, we may have used:

{ctCmdfile: plots/3D-1bis.ct2 }

Here, we also show that it is possible to add normal XY plots after a
color map. Please be warned though that, for the moment, @ctioga2@
does not support transparency for color maps, so it is mostly useless
to try to display several color maps.

h3. Adding a legend

That said, even if it is rather easy to recognise the cardinal sinus
in the plot above, getting precise values is yet another thing. To do
that, you need to setup a so-called Z axis using @--new-zaxis@ and
instruct @ctioga2@ to use that axis to display color map:

{ctCmdline: plots/3D-2.ct2-sh }

In addition, using the @--color-map@ command or the corresponding
option, it is possible to be more precise about which colors to use:

{ctCmdline: plots/3D-3.ct2-sh }

The @#f22--#fff(0)--#22f@ snippet is used to define precisely the
color gradients. It goes from red (@#f22@) to white (@#fff) at @z = 0@
to blue (@#22f@). Any number of points can be specified thus, allowing
for rather complex effects.

h3. Contour plots

Finally, it is possible to draw contour plots using the
@--draw-contour@ command, that takes as argument the desired Z level:

{ctCmdline: plots/3D-4.ct2-sh }

h3. Only contours

By setting {cmd: fill-transparency} to 1, it is possible to fully
disable the display of the maps, which can be useful if you're only
interested in the countour plots, see:

{ctCmdline: plots/3D-5.ct2-sh }

However, as of version 0.1, a lower value for {cmd: fill-transparency}
will have no effect, ie partial transparency is not supported yet.

Starting from @ctioga2@ version 0.5, there is a much better way to
display contour plots, which we present "below":#contour-real.

*Important note:* the plots based on {cmd: xyz-map} work only on
uniform XY grids (at least as far as version 0.1 is
concerned). However, the next bits will present other ways to display
non-uniform data.


h3. XY Parametric plots

What I call parametric XY plots are plain XY plots where some details
of the presentation (for now, only colors) depend on Z values.

*Warning:* XY parametric plots are still experimental, and their
syntax is still not fully defined. Things presented here will probably
not change much, but they may...

For the sake of the example, we will use the following 
"data file":plots/parametric-data.dat generated using:

<pre class='examples'>
0.upto(40) do |i| # X values
  1.upto(4) do |j| # Z values
    x = i * 0.2
    y = 1/(1 + j/x)
    puts "#{i}\t#{y}\t#{j}"
  end
end
</pre>

They represent various saturation curves with different saturation
parameters. Its easy to display all the curves in one go:

{ctCmdline: plots/3D-6.ct2-sh }

h3(#contour-real). Only contours, second take

Starting from @ctioga2@ version 0.5, it is possible to plot automatic
contour plots using the {cmd: contour} plot style:

{ctCmdfile: plots/3D-7.ct2}

In this mode, @ctioga2@ computes automatically the level lines and
draw them using the given color map and line style. By default,
@ctioga2@ draw major and minor level lines (similar to minor and major
ticks on axes). The @/contour-minor-style@ option controls the line
style of the minor ticks (while that of the major ticks is controlled
by the usual @/line-style@ option). The @/bar_size@ controls the width
of the Z axis bar (see that the bar is smaller than in the previous
examples).

